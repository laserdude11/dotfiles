#!/usr/bin/env chibi-scheme
; vim: ft=scheme
;;;;
;;;; A tool for performing Pomodoros.
;;;;

(import (scheme base)
        (scheme load)
        (scheme file)
        (scheme write)
        (scheme process-context)
        (chibi process)
        (chibi filesystem)
        (chibi pathname))

(define *work-time* 25)
(define *break-time* 5)
(define *long-break-time* 15)
(define *set-length* 4)

(define *status-dir* (string-append (get-environment-variable "TMPDIR")
                                    "/pomo"))

(define *tick-sound* (string-append (get-environment-variable "XDG_CONFIG_HOME")
                                    "/pomo/ticking.mp3"))

(define-syntax add-hook!
  (syntax-rules ()
    ((add-hook! hook proc)
     (set! hook (cons proc hook)))))

(define (call-hooks hook)
  (for-each (lambda (p)
             (p))
           hook))

(define *pomo-work-begin-hook* '())
(define *pomo-work-end-hook* '())
(define *pomo-break-begin-hook* '())
(define *pomo-break-end-hook* '())

(define (play-sound what)
  (system "canberra-gtk-play" "-i" (symbol->string what)))

(define (alert message)
  (system "notify-send" "--urgency=normal" "pomodoro" message))

(define (touch path)
  (close-output-port (open-output-file path)))

(define (update-status working?)
  (let ((working-file (string-append *status-dir* "/wrk"))
        (break-file (string-append *status-dir* "/brk")))
    (unless (file-directory? *status-dir*)
      (create-directory* *status-dir*))
    	(if working?
        (begin
            (when (file-exists? break-file)
                (delete-file break-file))
            (touch working-file))
        (begin
            (when (file-exists? working-file)
                (delete-file working-file))
            (touch break-file)))))

(define (clean-status)
  (delete-file-hierarchy *status-dir*))

(define tick-pid #f)

(define (start-ticking)
  (display *tick-sound*)
  (newline)
  (call-with-process-io `(mpv -really-quiet -loop ,0 ,*tick-sound*)
    (lambda (pid stdin stdout stderr)
      (set! tick-pid pid))))

(define (stop-ticking)
  (kill tick-pid signal/kill))

(define (do-set work-time break-time)
  (call-hooks *pomo-work-begin-hook*)
  (sleep (* 60 work-time))
  (call-hooks *pomo-work-end-hook*)
  (call-hooks *pomo-break-begin-hook*)
  (sleep (* 60 break-time))
  (call-hooks *pomo-break-end-hook*))

(define (long-break time)
  (call-hooks *pomo-break-begin-hook*)
  (sleep (* 60 time))
  (call-hooks *pomo-break-end-hook*))

(define (pomodoro work-length break-length long-break-length set-count)
  (let set-loop ((current-set 1))
                	(if (= current-set set-count)
                    (long-break long-break-length)
                    (begin
                        (do-set work-length break-length)
                        (set-loop (+ current-set 1)))))
  (play-sound 'complete)
  (alert "done!")
  (clean-status))

(set-signal-action! signal/term 
  (lambda (signum)
    (stop-ticking)
    (clean-status)))

(add-hook! *pomo-work-begin-hook*
  (lambda ()
    (play-sound 'bell)
    (alert "start working!")
    (update-status #t)
    (system "punch" "in")
    (start-ticking)))

(add-hook! *pomo-work-end-hook*
  (lambda ()
    (stop-ticking)
    (system "punch" "out")))

(add-hook! *pomo-break-begin-hook*
  (lambda ()
          	(play-sound 'bell)
          	(alert "break time!")
          	(update-status #f)
          	(system "punch" "in" "break")))

(add-hook! *pomo-break-end-hook*
  (lambda ()
    (system "punch" "out")))

(let ((init-file-name (string-append (get-environment-variable "XDG_CONFIG_HOME")
                                     "pomo/init.scm")))
  (if (file-exists? init-file-name)
      	(load init-file-name)))

(pomodoro *work-time* 
          *break-time* 
          *long-break-time* 
          *set-length*)

