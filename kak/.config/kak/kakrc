#
# Laserswald's kakrc.
#
echo -debug "starting kakrc"

# Looks.

# colorscheme gruvbox
colorscheme chameleon
# colorscheme gruvbox-light

# Custom faces.

set-face global Column black,white+r

add-highlighter global/ number-lines -relative -separator ' | ' -hlcursor
add-highlighter global/ wrap
add-highlighter global/ show-matching


# set-face global Column black,white+rb
# add-highlighter global/ column 80 Column

# Plugins.
#
echo -debug "loaded look and feel"

source "%val{config}/plugins/plug.kak/rc/plug.kak"

plug "andreyorst/plug.kak" noload

plug "andreyorst/fzf.kak" config %{
	map global goto F <esc>:fzf-file<ret> -docstring "Find a file"
	map global goto b <esc>:fzf-buffer<ret> -docstring "Find a file"
}

plug "andreyorst/tagbar.kak" config %{
	hook global WinSetOption filetype=tagbar %{
		remove-highlighter window/wrap
	}
}

# plug "alexherbo2/auto-pairs.kak"

plug "andreyorst/powerline.kak" config %{
	powerline-start
}

try %{
	plug "eraserhd/parinfer-rust" do %{
		cargo install --force --path .
	} config %{
		hook global WinSetOption filetype=(clojure|lisp|scheme|racket) %{
			parinfer-enable-window -smart
		}
	}
}

plug "occivink/kakoune-snippets"

echo -debug "loaded plugins"

require-module goto-definition

try %{
    require-module tmux-repl
}

echo -debug "loaded modules"

# General options.

set-option global grepcmd 'ag --ignore=tags --ignore=.git* --column'

# Alignment

set-option global tabstop 4
set-option global indentwidth 0
set-option global aligntab false

# Styles and hooks for all windows.

hook global WinCreate .* %{
	modeline-parse
	ctags-enable-autoinfo
	try %{ editorconfig-load }
	git show-diff
	hook -group tabs-to-spaces buffer InsertChar \t %{ try %{
		execute-keys -draft h %opt{indentwidth}@
	} }
	auto-pairs-enable
}

hook global BufWritePost .* %{
	git update-diff
	ctags-update-tags
}

hook global ClientCreate .* %{
	setup-jump-client
}

## Filetype-specific hooks

hook global BufCreate .*\.js4$ %{
	set-option buffer filetype javascript
}

hook global WinSetOption filetype=kak %{
	map buffer user s \
        -docstring "Source this kak file" \
        <esc>:source<space>%reg{%}<ret>
}

hook global WinSetOption filetype=makefile %{
	remove-hooks buffer tabs-to-spaces
}

hook global WinSetOption filetype=zig %{
	set buffer indentwidth 4
	hook -group tabs-to-spaces buffer InsertChar \t %{
        try %{
            execute-keys -draft h %opt{indentwidth}@
        }
	}
}

hook global WinSetOption filetype=(scheme|lisp|clojure) %{
	map -docstring "Send selection to repl window" buffer user s <esc>:send-text<ret>       
	map -docstring "Send current paragraph to repl window" buffer user S <esc><a-i>p:send-text<ret> 
}

hook global WinSetOption filetype=php %{
	remove-hooks buffer tabs-to-spaces
	define-command -override phpunit-this-file %{
		set-option buffer makecmd "vendor/bin/phpunit %reg{%}"
	}
}

## Commands.

define-command -hidden setup-jump-client %{
	evaluate-commands %sh{
		if ! (echo "$kak_client_list" | grep -q 'jump') ; then
			printf %s\\n "rename-client jump"
		fi
		if ! [ "$kak_opt_jumpclient" ] ; then
			printf %s\\n "set-option global jumpclient jump"
		fi
	}
}

### Tools and docs clients.

define-command set-tools-client %{
	rename-client tools
	set-option global toolsclient tools
}

define-command set-docs-client %{
	rename-client docs
	set-option global docsclient docs
}

define-command open-tools %{
	new set-tools-client
}

define-command close-tools %{
	evaluate-commands %sh{
		printf %s\\n "evaluate-commands -client %opt{toolsclient} quit"
	}
}

define-command open-docs %{
	new set-docs-client
}

define-command close-docs %{
    evaluate-commands %sh{
	    printf %s\\n "evaluate-commands -client %opt{docsclient} quit"
    }
}

define-command open-ide %{
	open-docs
	open-tools
	nop %sh{
        $(TMUX) select-layout main-vertical
	}
}

define-command split %{
    tmux-terminal-vertical kak -c %val{session}
}

define-command cqlout-hl %~
    addhl buffer/start regex '([a-zA-Z]+): evaluating...' 1:bright-magenta,default
    addhl buffer/return regex '([a-zA-Z]+) (-->) ([^{\n]+)' 1:magenta,default 2:yellow,default 3:green,default
    addhl buffer/returnexpr regex '\(\d+\) ([a-zA-Z0-9 ]+) (-->) ([^{\n]+)' 1:cyan,default 2:yellow,default 3:green,default
    addhl buffer/expressionref regex '\(\d+\) ([a-zA-Z0-9 ]+):' 1:bright-cyan,default
    addhl buffer/true regex 'TRUE' 0:green,default
    addhl buffer/false regex 'FALSE' 0:red,default
    addhl buffer/null regex 'NULL' 0:bright-red,default
~

define-command cross-reference %{
	evaluate-commands -client %opt{docsclient} ctags-search %val{selection}
}

define-command git-merge-left %{
	execute-keys "<a-/><<<<<<<?=======<a-x>d/>>>>>>>xd"
}

define-command git-merge-right %{
	execute-keys "<a-/><<<<<<<?=======<a-x>d/>>>>>>>xd"
}

# Mappings

# User mappings
map -docstring "Comment the selection, block style" \
	global user C \
	<esc>:comment-block<ret>

map -docstring "Comment the selection" \
	global user c \
	<esc>:comment-line<ret>

map -docstring "Delete this buffer." \
	global user d \
	<esc>:db<ret>

map -docstring "Make the current project" \
	global user m \
	<esc>:make<ret>

map -docstring "Load your kakrc" \
	global user R \
	<esc>:source<space>~/.config/kak/kakrc<ret>

map -docstring "Write the file and add the changes to version control" \
	global user w \
	<esc>:write<ret>:git<space>add<ret>

map -docstring "Open fuzzy finder mode" \
	global user , \
	<esc>:fzf-mode<ret>


# Go to mappings
map -docstring "your kakrc file" \
	global goto K \
	<esc>:edit!<space>~/.config/kak/kakrc<ret>

map -docstring "another open buffer" \
	global goto b \
	<esc>:buffer<space>

map -docstring "symbol definition" \
	global goto d \
	<esc><a-i>w:jump-to-definition<ret>

map -docstring "next mention in buffer" \
	global goto n \
	<esc><a-i>w*n<ret>

map -docstring "goto reference for editing" \
	global goto u \
	<esc>:find-references<ret>

map -docstring "goto reference for viewing" \
	global goto x \
	<esc>:cross-reference<ret>

map -docstring "the scratch buffer" \
	global goto s \
    <esc>:buffer *scratch*<ret>


# Language server protocol support.
try %{
	# evaluate-commands %sh{ kak-lsp --kakoune -s $kak_session }
	# lsp-start
	# hook global KakEnd .* %{ lsp-exit }
	# hook global WinSetOption filetype=php %{ lsp-enable-window }
}

# Local kakrc sourcing for custom project commands and tools
try %{ source .kakrc.local }

